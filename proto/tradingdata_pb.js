/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tradingdatapb.ReplySendTradeData', null, global);
goog.exportSymbol('proto.tradingdatapb.SendTradeData', null, global);
goog.exportSymbol('proto.tradingdatapb.TRADETYPE', null, global);
goog.exportSymbol('proto.tradingdatapb.TradeInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdatapb.TradeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdatapb.TradeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tradingdatapb.TradeInfo.displayName = 'proto.tradingdatapb.TradeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdatapb.TradeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdatapb.TradeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdatapb.TradeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdatapb.TradeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    curtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    size: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdatapb.TradeInfo}
 */
proto.tradingdatapb.TradeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdatapb.TradeInfo;
  return proto.tradingdatapb.TradeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdatapb.TradeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdatapb.TradeInfo}
 */
proto.tradingdatapb.TradeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurtime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdatapb.TradeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdatapb.TradeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdatapb.TradeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdatapb.TradeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurtime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tradingdatapb.TradeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tradingdatapb.TradeInfo.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 curtime = 2;
 * @return {number}
 */
proto.tradingdatapb.TradeInfo.prototype.getCurtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tradingdatapb.TradeInfo.prototype.setCurtime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float price = 3;
 * @return {number}
 */
proto.tradingdatapb.TradeInfo.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.tradingdatapb.TradeInfo.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float size = 4;
 * @return {number}
 */
proto.tradingdatapb.TradeInfo.prototype.getSize = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.tradingdatapb.TradeInfo.prototype.setSize = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdatapb.SendTradeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingdatapb.SendTradeData.repeatedFields_, null);
};
goog.inherits(proto.tradingdatapb.SendTradeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tradingdatapb.SendTradeData.displayName = 'proto.tradingdatapb.SendTradeData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingdatapb.SendTradeData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdatapb.SendTradeData.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdatapb.SendTradeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdatapb.SendTradeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdatapb.SendTradeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.tradingdatapb.TradeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdatapb.SendTradeData}
 */
proto.tradingdatapb.SendTradeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdatapb.SendTradeData;
  return proto.tradingdatapb.SendTradeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdatapb.SendTradeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdatapb.SendTradeData}
 */
proto.tradingdatapb.SendTradeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = new proto.tradingdatapb.TradeInfo;
      reader.readMessage(value,proto.tradingdatapb.TradeInfo.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdatapb.SendTradeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdatapb.SendTradeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdatapb.SendTradeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdatapb.SendTradeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tradingdatapb.TradeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.tradingdatapb.SendTradeData.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tradingdatapb.SendTradeData.prototype.setMarket = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.tradingdatapb.SendTradeData.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tradingdatapb.SendTradeData.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TradeInfo trades = 3;
 * @return {!Array<!proto.tradingdatapb.TradeInfo>}
 */
proto.tradingdatapb.SendTradeData.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.tradingdatapb.TradeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingdatapb.TradeInfo, 3));
};


/** @param {!Array<!proto.tradingdatapb.TradeInfo>} value */
proto.tradingdatapb.SendTradeData.prototype.setTradesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tradingdatapb.TradeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingdatapb.TradeInfo}
 */
proto.tradingdatapb.SendTradeData.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tradingdatapb.TradeInfo, opt_index);
};


proto.tradingdatapb.SendTradeData.prototype.clearTradesList = function() {
  this.setTradesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdatapb.ReplySendTradeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdatapb.ReplySendTradeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tradingdatapb.ReplySendTradeData.displayName = 'proto.tradingdatapb.ReplySendTradeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdatapb.ReplySendTradeData.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdatapb.ReplySendTradeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdatapb.ReplySendTradeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdatapb.ReplySendTradeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nums: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errinfo: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdatapb.ReplySendTradeData}
 */
proto.tradingdatapb.ReplySendTradeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdatapb.ReplySendTradeData;
  return proto.tradingdatapb.ReplySendTradeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdatapb.ReplySendTradeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdatapb.ReplySendTradeData}
 */
proto.tradingdatapb.ReplySendTradeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNums(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdatapb.ReplySendTradeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdatapb.ReplySendTradeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdatapb.ReplySendTradeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdatapb.ReplySendTradeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNums();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrinfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 nums = 1;
 * @return {number}
 */
proto.tradingdatapb.ReplySendTradeData.prototype.getNums = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tradingdatapb.ReplySendTradeData.prototype.setNums = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errInfo = 2;
 * @return {string}
 */
proto.tradingdatapb.ReplySendTradeData.prototype.getErrinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tradingdatapb.ReplySendTradeData.prototype.setErrinfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.tradingdatapb.TRADETYPE = {
  TRADETYPE_BUY: 0,
  TRADETYPE_SELL: 1
};

goog.object.extend(exports, proto.tradingdatapb);
